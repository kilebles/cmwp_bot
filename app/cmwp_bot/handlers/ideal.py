import datetime as dt
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from typing import AsyncGenerator

from app.cmwp_bot.presentation.keyboards import make_keyboard, get_plan_kb
from app.cmwp_bot.db.repo import get_session
from app.cmwp_bot.services.survey_service import get_answers_for_user
from app.cmwp_bot.services.user_service import create_or_update_user, get_admin_ids
from app.cmwp_bot.services.action_service import create_user_action
from app.cmwp_bot.db.models import ActionType, SurveyAnswer

router = Router()
active_surveys: dict[int, AsyncGenerator] = {}


@router.callback_query(F.data == 'ideal')
async def start_survey(callback: CallbackQuery):
    from_user = callback.from_user

    async with get_session() as session:
        user = await create_or_update_user(
            session=session,
            tg_id=from_user.id,
            first_name=from_user.first_name or '',
            last_name=from_user.last_name or '',
            company='',
            phone='',
        )
        await session.flush()
        await create_user_action(session, user_id=user.id, action_type=ActionType.SURVEY_STARTED)

    await callback.message.delete()
    msg = await callback.message.answer("...")
    gen = ideal_office_survey(msg, from_user)
    active_surveys[callback.from_user.id] = gen
    await gen.asend(None)
    await callback.answer()


@router.callback_query(F.data.startswith('q'))
async def survey_step(callback: CallbackQuery):
    gen = active_surveys.get(callback.from_user.id)
    if not gen:
        await callback.answer('–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', show_alert=True)
        return
    try:
        await gen.asend(callback)
    except StopAsyncIteration:
        del active_surveys[callback.from_user.id]
    await callback.answer()


async def ideal_office_survey(msg: Message, from_user) -> AsyncGenerator:
    questions = [
        ("–ö–∞–∫–∞—è –ø–ª–æ—â–∞–¥—å –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞?", ["–î–æ 1000 –º¬≤", "1000‚Äì5000 –º¬≤", "–ë–æ–ª–µ–µ 5000 –º¬≤"]),
        ("–°–∫–æ–ª—å–∫–æ —ç—Ç–∞–∂–µ–π –≤ –≤–∞—à–µ–º –æ—Ñ–∏—Å–µ?", ["1 —ç—Ç–∞–∂", "2‚Äì5 —ç—Ç–∞–∂–µ–π", "–ë–æ–ª–µ–µ 5 —ç—Ç–∞–∂–µ–π"]),
        ("–ì–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –æ–±—ä–µ–∫—Ç?", ["–ú–æ—Å–∫–≤–∞", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω"]),
        ("–ö–∞–∫–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ñ–∏—Å–∞?", ["–ß–µ—Ä–Ω–æ–≤–∞—è –æ—Ç–¥–µ–ª–∫–∞", "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞", "–ù—É–∂–Ω–∞ –∏–¥–µ—è", "–î—Ä—É–≥–æ–µ"]),
        ("–°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏?", ["–ú–µ–Ω–µ–µ 100", "100‚Äì500", "–ë–æ–ª–µ–µ 500"]),
        ("–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ñ–∏—Å–∞ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?", ["Open-space", "–ö–∞–±–∏–Ω–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "–ì–∏–±—Ä–∏–¥–Ω—ã–π", "–î—Ä—É–≥–æ–µ"]),
        ("–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ—Ñ–∏—Å–∞ –±–ª–∏–∂–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?", [
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏–∑–º", "–¢—ë–ø–ª—ã–π –∏ –¥–æ–º–∞—à–Ω–∏–π",
            "–•–∞–π-—Ç–µ–∫/—Ç–µ—Ö–Ω–æ–≥–µ–Ω–Ω—ã–π", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å-—Å—Ç–∏–ª—å",
            "–ù–µ –∑–Ω–∞—é, —Ö–æ—á—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"
        ])
    ]

    for i, (q_text, options) in enumerate(questions, start=1):
        kb = make_keyboard(options, f'q{i}')
        msg = await msg.edit_text(f"<b>{i}.</b> {q_text}", reply_markup=kb, parse_mode='HTML')
        callback: CallbackQuery = yield

        answer_text = callback.data.split(':', 1)[-1]
        async with get_session() as session:
            user = await create_or_update_user(
                session=session,
                tg_id=from_user.id,
                first_name=from_user.first_name or '',
                last_name=from_user.last_name or '',
            )
            answer = SurveyAnswer(
                user_id=user.id,
                question_no=i,
                answer=answer_text
            )
            session.add(answer)
            await session.commit()

    async with get_session() as session:
        user = await create_or_update_user(
            session=session,
            tg_id=from_user.id,
            first_name=from_user.first_name or '',
            last_name=from_user.last_name or '',
        )
        user.survey_completed_at = dt.datetime.utcnow()
        session.add(user)
        await create_user_action(
            session=session,
            user_id=user.id,
            action_type=ActionType.SURVEY_COMPLETED
        )
        await session.commit()

    await msg.answer_photo(
        photo='https://i.postimg.cc/8zr0f4Zy/1737985155837-2.jpg',
        caption=(
            "–í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å ‚Äî —ç—Ç–æ –Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–µ—Ç—Ä—ã. –≠—Ç–æ –≤–∞—à–∞ –∏–¥–µ—è, –æ–∂–∏–≤—à–∞—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.\n"
            "–í—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—à–ª–∏ –∞–Ω–∫–µ—Ç—É.\n"
            "–í—ã –Ω–∞ –ø–æ—Ä–æ–≥–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–∞–∂–∞–µ—Ç –º—ã—à–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã, —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –±—É–¥—É—â–µ–µ –≤–∞—à–µ–π –∫—É–ª—å—Ç—É—Ä—ã.\n"
            "–¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ:\n"
            "‚Äî –û—Ñ–∏—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –¥—ã—à–∏—Ç—Å—è –ª–µ–≥–∫–æ ‚Äî –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑-–∑–∞ –≤–æ–∑–¥—É—Ö–∞, –Ω–æ –∏–∑-–∑–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.\n"
            "‚Äî –î–∏–∑–∞–π–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–∞—è –ª–∏–Ω–∏—è –ø—Ä–æ–¥—É–º–∞–Ω–∞ ‚Äî —Å—Ç–∏–ª—å–Ω—ã–π –∏ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–π.\n"
            "‚Äî –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ –Ω—É–∂–Ω–æ ¬´–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª ‚Äî –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–¥–µ–π, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–æ–∑–¥–∞–Ω–æ –∏–∑–Ω—É—Ç—Ä–∏, —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º.\n"
            "‚Äî –õ—é–¥–∏ —Ö–æ—Ç—è—Ç —Ç—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è. –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Ö–æ—Ç—è—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —É –≤–∞—Å. –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–º–æ–≥–∞–µ—Ç, –∞ –Ω–µ –º–µ—à–∞–µ—Ç.\n"
            "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–º—Ñ–æ—Ä—Ç.\n"
            "–≠—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–∫—Ç–∏–≤. –≠—Ç–æ —Ä–µ–ø—É—Ç–∞—Ü–∏—è. –≠—Ç–æ –≤–∞—à–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ, –Ω–µ–∑–∞–º–µ—Ç–Ω–æ–µ, –Ω–æ —Å–∏–ª—å–Ω–æ–µ.\n"
            "–ê —Ç–µ–ø–µ—Ä—å –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è–µ—Ç –∏–≥—Ä—É:\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–ª–∞–Ω, –∞ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≤ –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ö–æ—á–µ—Ç—Å—è –≤–ª—é–±–∏—Ç—å—Å—è ‚Äî –≤–∞–º, –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –∏ –≤–∞—à–µ–º—É CEO?"
        ),
        reply_markup=get_plan_kb,
        parse_mode='HTML'
    )


@router.callback_query(F.data == 'get_plan')
async def plan_answer(callback: CallbackQuery):
    """–ö–æ–º–º–∏—Ç –≤ –ë–î –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º"""
    from_user = callback.from_user
    bot = callback.message.bot

    async with get_session() as session:
        user = await create_or_update_user(
            session=session,
            tg_id=from_user.id,
            first_name=from_user.first_name or '',
            last_name=from_user.last_name or '',
        )
        await create_user_action(
            session=session,
            user_id=user.id,
            action_type=ActionType.CLICK_GET_PLAN
        )

        answers = await get_answers_for_user(session, user.id)

        questions_map = {
            1: "–ö–∞–∫–∞—è –ø–ª–æ—â–∞–¥—å –≤–∞—à–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞?",
            2: "–°–∫–æ–ª—å–∫–æ —ç—Ç–∞–∂–µ–π –≤ –≤–∞—à–µ–º –æ—Ñ–∏—Å–µ?",
            3: "–ì–¥–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –æ–±—ä–µ–∫—Ç?",
            4: "–ö–∞–∫–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ñ–∏—Å–∞?",
            5: "–°–∫–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏?",
            6: "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ñ–∏—Å–∞ –≤–∞–º –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç?",
            7: "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –æ—Ñ–∏—Å–∞ –±–ª–∏–∂–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ?",
        }

        answers_text = "\n".join(
            f"<b>{i}. {questions_map.get(ans.question_no, '–í–æ–ø—Ä–æ—Å')}</b>\n‚Äî {ans.answer}"
            for i, ans in enumerate(answers, start=1)
        )

        full_name = f'{user.first_name or ""} {user.last_name or ""}'.strip()
        username_link = (
            f'https://t.me/{from_user.username}'
            if from_user.username else '‚Äî'
        )

        text = (
            f'üë§ <b>{full_name}</b>\n'
            f'—Ö–æ—á–µ—Ç –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–µ–∫—Ç\n\n'
            f'–ö–æ–º–ø–∞–Ω–∏—è: {user.company or "‚Äî"}\n'
            f'–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or "‚Äî"}\n'
            f'–ü—Ä–æ—Ñ–∏–ª—å: {username_link}\n\n'
            f'üìã <b>–û—Ç–≤–µ—Ç—ã –Ω–∞ –∞–Ω–∫–µ—Ç—É:</b>\n{answers_text}'
        )

        admin_ids = await get_admin_ids(session)
        for admin_id in admin_ids:
            await bot.send_message(admin_id, text, parse_mode='HTML')

    await callback.message.answer(
        '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —É–∂–µ –≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –ø–ª–∞–Ω. –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è!',
        parse_mode='HTML'
    )
    await callback.answer()